// Generated by CoffeeScript 1.8.0
(function() {
  var T, attributify, createTag, createTagFunction, formatAttributes, getRawContent, isFunction, tag, tags, _i, _len,
    __slice = [].slice;

  tags = ['p', 'div', 'a'];

  isFunction = function(object) {
    var getType;
    getType = {};
    return object && getType.toString.call(object) === '[object Function]';
  };

  formatAttributes = function(attributes) {
    var formattedAttributes, key, value;
    if (attributes == null) {
      return "";
    }
    formattedAttributes = [];
    for (key in attributes) {
      value = attributes[key];
      formattedAttributes.push("" + key + "='" + value + "'");
    }
    return ' ' + formattedAttributes.join(' ');
  };

  attributify = function(selector) {
    var attributes, classes, ids, _ref, _ref1;
    classes = (_ref = selector.match(/\.\w+/g)) != null ? _ref.map(function(name) {
      return name.slice(1);
    }) : void 0;
    ids = (_ref1 = selector.match(/#\w+/g)) != null ? _ref1.map(function(name) {
      return name.slice(1);
    }) : void 0;
    attributes = {};
    if (ids != null) {
      attributes.id = ids.join(' ');
    }
    if (classes != null) {
      attributes["class"] = classes.join(' ');
    }
    return attributes;
  };

  getRawContent = function(content) {
    if (isFunction(content)) {
      content = content();
    }
    if (Array.isArray(content)) {
      content = content.join('');
    }
    return content;
  };

  createTag = function(tagName) {
    return function(content, attributes, selector) {
      var formattedAttributes, key, value, _ref;
      if (selector == null) {
        selector = '';
      }
      content = getRawContent(content);
      if (typeof attributes === 'string') {
        attributes = attributify(attributes);
      }
      _ref = attributify(selector);
      for (key in _ref) {
        value = _ref[key];
        attributes[key] = value;
      }
      formattedAttributes = formatAttributes(attributes);
      return "<" + tagName + formattedAttributes + ">" + content + "</" + tagName + ">";
    };
  };

  createTagFunction = function(tagName, bindTarget) {
    return bindTarget[tagName] = function() {
      var args, reversedArgs;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      reversedArgs = args.reverse();
      return createTag(tagName).apply(null, reversedArgs);
    };
  };

  T = {};

  for (_i = 0, _len = tags.length; _i < _len; _i++) {
    tag = tags[_i];
    createTagFunction(tag, T);
  }

  if (typeof window !== "undefined" && window !== null) {
    window.T = T;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = T;
  }

}).call(this);
